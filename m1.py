# -*- coding: utf-8 -*-
"""m1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Uy5mVeCVeqrRTqsC1d1dogf7a_AglR_

# **BOOT CAMP DATA SCIENCE - 2**
iniciado em qua., 19 de mai de 2021. 14:58h
# Módulo 01: Python e pandas para análise de dados reais 
storytelling: 
Procedimentos hospitalares do SUS - por local de nternação - Brasi

Valor total por Ano/mês atendimento
segundo Unidade da Federação
Período: Fev/2008-Mar/2021


Arquivos:

A152215189_28_143_208_atendimento.csv

A152436189_28_143_208_processamento.csv

Fonte: http://www2.datasus.gov.br/DATASUS/index.php?area=0202&id=11633

# Produção hospitalar e Pandas
"""

import pandas as pd
# leitura de arquivo da base de dados tabnet do DATASUS
dados = pd.read_csv("/content/A152215189_28_143_208_atendimento.csv",
                    encoding="ISO-8859-1", skiprows=3, sep=";", skipfooter=12, thousands=".", decimal=",")
dados.head()

dados.describe()

dados.info()

pd.options.display.float_format = "{:.2f}".format

dados.mean()

"""#Visualizações e gráficos"""

dados['2018/Ago']

# https://pandas.pydata.org/docs/index.html
dados['2018/Ago'].mean()

#dados.plot("Unidade da Federação",('2018/Ago'), kind="bar",figsize=(10,7))
#MÊS MAIS RECENTE
dados.plot("Unidade da Federação",(-2), kind="bar",figsize=(10,7))

# Desafio 01: Escolher um título mais descritivo, que passe a mensagem adequada ao gráfico de barras.
# Desafio 02: Faça a mesma análise realizada em aula, porém para o mês mais recente.
# by geanclm in 20/05/2021
import matplotlib.pyplot as plt, matplotlib.ticker as ticker
recente = dados.columns[-2]
ax = dados.sort_values(by=recente,ascending = False).plot.bar(x="Unidade da Federação", y=recente, figsize=(9,6))
ax.yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:,.2f}"))
plt.title("BRASIL - GASTOS ATENDIMENTO SAÚDE")
plt.show()

"""# Entendendo gráficos"""

# mudar o data set = content/A152215189_28_143_208_atendimento.csv
dados [["2008/Ago","2008/Set"]].head()

dados.mean()

dados.mean().index

colunas_usaveis = dados.mean().index
dados[colunas_usaveis].head()

colunas_usaveis = dados.mean().index.tolist()
colunas_usaveis.insert(0,'Unidade da Federação')
colunas_usaveis

usaveis = dados[colunas_usaveis]
usaveis.head()

usaveis = usaveis.set_index('Unidade da Federação')
usaveis

usaveis['2019/Ago']

usaveis.loc['25 Paraíba']

usaveis.T.plot(figsize=(10,7))

usaveis.drop ('Total',axis=1)

usaveis.drop ('Total',axis=1)
  usaveis = usaveis.drop ('Total',axis=1)

"""Desafio 01: Reposicionar a legenda do gráfico em uma posição mais adequada"""

usaveis.T.columns

usaveis.T.columns[1:4]

usaveis.T.columns

usaveis.index

usaveis.sum(axis=1)

usaveis.T.plot(figsize=(10,7))
ax = plt.subplot()
#ax.legend(loc='center left', bbox_to_anchor=(0.5, 1.05), ncol=3, fancybox=True, shadow=True)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

"""Desafio: explorar as cores da paleta para não repetir cores no estados

Desafio 02: Plotar o gráfico de linha com apenas 5 estados de sua preferência

# Aleatoriedade e mais explorações
"""

usaveis[:5].T.plot(figsize=(10,6))

pip install numpy

import numpy as np
np.random.seed(687942)
usaveis.sample(n=7)

# acrescentando coluna "Total"
usaveis["Total"] = usaveis.sum(axis=1)
usaveis.head(5)

"""# Ordenação e série temporal"""

usaveis.sort_values("Total")

usaveis.sort_values("Total", ascending=False)

ordenado_por_total = usaveis.sort_values("Total", ascending=False) 
ordenado_por_total = ordenado_por_total.drop(["Total"], axis=1)

ordenado_por_total.head(5)

ordenado_por_total.head(5).T.plot(figsize=(10,6))

colunas_interessadas = ordenado_por_total.columns[6:]
#colunas_interessadas = (usaveis['41 Paraná'])
#ordenado_por_total = ordenado_por_total[colunas_interessadas]
ordenado_por_total[colunas_interessadas].head()
#ordenado_por_total.head(5).T.plot(figsize=(10,6))

colunas_interessadas = ordenado_por_total.columns[6:]
ordenado_por_total = ordenado_por_total[colunas_interessadas]
ordenado_por_total.head(5).T.plot(figsize=(10,6))

"""# DESAFIOS

Desafio 01: Escolher uma palete de cores mais adequada do matplotlib.
"""

nc = len(ordenado_por_total)
c = plt.cm.nipy_spectral(np.linspace(0, 1, nc))
grafico = ordenado_por_total.T.plot(figsize=(10,6), color=c)
grafico.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
grafico.yaxis.set_major_formatter(ticker.StrMethodFormatter("R$ {x:,.2f}"))
plt.title("Gastos por atendimentos hospitalares - Brasil")
plt.show()

"""
Desafio 02: Adicionar uma coluna mostrando a região (Norte, Nodeste, Sul, Suldeste e Centro-Oeste) de cada estado."""

# inserindo coluna com a regiado de cada estado
regiao =  {'1':'Norte', '2':'Nordeste', '3':'Sudeste', '4':'Sul', '5':'Centro-Oeste'}
fr = lambda x: regiao[x.name[0]]
usaveis['Região'] = usaveis.apply(fr, axis=1)
usaveis.head()

"""Desafio 03: Formatar o gráfico de custos por mês dos 5 estados, deixando ele agradável (Bonitão, segundo o Gui)"""

import seaborn as sns
sns.set_palette(sns.color_palette("gist_rainbow", 5))
ordenado_por_total[:5].T.plot(figsize=(10,6))
plt.title("Estados com maior gasto na saúde", fontsize=20)
plt.xlabel("Período", fontsize=15)
plt.ylabel("R$ milhões", fontsize=15)
plt.legend(title="UF", bbox_to_anchor = (1.30, 1), frameon=True)
plt.show()

"""Desafio 04: Adicione o seu estado aos 5 estados plotados anteriormente"""

usaveis.sum(axis=1)

compara = ordenado_por_total.head(5).index.to_list()
compara.append("25 Paraíba")
compara

compara.append("53 Distrito Federal")
compara

compara.append("42 Santa Catarina")
compara

#definindo cores distintas para cada UF
nc = len(ordenado_por_total)
colors = plt.cm.nipy_spectral(np.linspace(0, 3, nc))
# - - -
sns.set_palette(sns.color_palette("gist_rainbow", 6))
ordenado_por_total.loc[compara].T.plot(figsize=(12,8), color=colors)
plt.title("PB, SC, DF vs estados com maior gasto na saúde", fontsize=20)
plt.xlabel("Período", fontsize=15)
plt.ylabel("R$ milhões", fontsize=15)
plt.legend(title="UF", bbox_to_anchor = (1.30, 1), frameon=True)
plt.show()

"""Desafio 05: Buscar os casos de dengue no Brasil (época de maior número de casos e regiões mais atingidas) e se os picos de alguns estados em fevereiro e verão de modo geral, pode ser reflexos dos casos de dengue

Casos de dengue no país aumentam 190% em 2013, diz governo.

http://g1.globo.com/bemestar/noticia/2013/02/casos-de-dengue-no-pais-aumentam-190-no-comeco-de-2013-diz-governo.html

Disponível em 29/05/2021

Desafio 06: Plotar o gráfico dos custos apenas dos estados da região sudeste e verificar se os picos de 2013/Fev teve comportamento similar em todos os demais estados da região
"""

sudeste = usaveis.loc[usaveis['Região'] == 'Sudeste']
sudeste

sudeste = sudeste.drop(['Região'], axis=1)
sudeste = sudeste.drop(['Total'], axis=1)

sns.set_palette(sns.color_palette("gist_rainbow", 6))
sudeste.T.plot(figsize=(10,8))
plt.title("Sudeste Brasileiro", fontsize=15)
plt.xlabel("Período", fontsize=15)
plt.ylabel("Gastos", fontsize=15)
plt.legend(title="UF", bbox_to_anchor = (1.30, 1), frameon=True)
plt.grid(color='b', linestyle='-', linewidth=0.4)
plt.show()

"""Desafio 07: Adicionar seu estado escolhido novamente, deixe o gráfico informativo e tire conclusões sobre seus estados comparando com os demais. Tire suas conclusões e compartilhe com a gente."""

# Adicionando estados de moradia familiar
nc = len(ordenado_por_total)
colors = plt.cm.nipy_spectral(np.linspace(0, 3, nc))
# - - -
sns.set_palette(sns.color_palette("gist_rainbow", 6))
ordenado_por_total.loc[compara].T.plot(figsize=(12,8), color=colors)
plt.title("PB, SC, DF vs estados com maior gasto na saúde", fontsize=20)
plt.xlabel("Período", fontsize=15)
plt.ylabel("R$ milhões", fontsize=15)
plt.legend(title="UF", bbox_to_anchor = (1.30, 1), frameon=True)
plt.show()

"""Fica claro no gráfico que os estados SC, DF e PB tem gastos com saúde bem inferior aos cinco estados com maior gasto, no período de análise.

# Fugindo de más práticas
"""

ordenado_por_total= ordenado_por_total / 1000000
ordenado_por_total.head(5).T.plot(figsize=(10,6))

ordenado_por_total.head(5).T.plot(figsize=(10,6))

ordenado_por_total[ordenado_por_total.columns[47:]].head(3).T.plot(figsize=(10,6))

meses_filtrados = ordenado_por_total.columns[47:150] 
ordenado_por_total[meses_filtrados].head(3).T.plot(figsize=(10,6))

ordenado_por_total[meses_filtrados].head(3).T.plot(figsize=(10,6))
plt.ylim(0, 350)

# 29/05/2021 Sábado 09:29h
# OBservação sobre esse gráfico específico: ponto importante sobre a informação passada no gráfico.
# O corte efetuado nos dados, tanto no eixo "x" quanto no eixo "y" pode
# deturpar a interpretação final do gráfico promovendo uma falsa sensação de segurança
# " quando limitamos a visão consequentemente deturpamos a interpretação dos dados"
# ótimo sassunto para tese de doutorado
# " um cientista de dadss deve comprometer-se a passar a informação adequada no gráfico"
ordenado_por_total[meses_filtrados].head(3).T.plot(figsize=(10,6))
plt.ylim(100, 350)

# OBservação com relação a esse gráfico
# CUIDADO: uma história pode estar sendo contada de que os gastos estão caindo
# mas a amostragem de dados foi novamente limitada a um certo período
# Iaao porque aqui foram escolhidos somente 12 meses. Comsiderando o range
# dados para analies é um período muito pequeno para interpretação massima de dados.
# MUITO CUIDADO: janela x/y de qualquer gráfico apresentada no gráfico
# Um cientista de dados deve zelar pela apresentação veridica dos dados
# dentro do range x/y proposto defendendo a informação adequada
ordenado_por_total[ordenado_por_total.columns[-12:]].head(3).T.plot(figsize=(10,6))
plt.ylim(0, 350)

"""Desafio 01: Refaça as manipulações feitas em aulas e gaste um tempo analisando os dados e entendendo os efeitos das manipulações

Desafio 02: Reflita sobre os problemas na manipulação de dados e discuta esse assunto no Discord.

# Alternativas de visualizações
"""